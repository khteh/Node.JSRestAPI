version: 2 # use CircleCI 2.0
jobs: # a collection of steps
  build: # runs not using Workflows must have a `build` job as entry point
    working_directory: ~/mern-starter # directory where steps will run
    docker: # run the steps with Docker
      - image: node:latest # ...with this image as the primary container; this is where all `steps` will run
        environment:
          MYSQL_HOST: 127.0.0.1
          MYSQL_DB: school
          MYSQL_USER: root
          MYSQL_ALLOW_EMPTY_PASSWORD: true
          MYSQL_PASSWORD:
      - image: mysql:latest
        command: mysqld --character-set-server=utf8mb4 --collation-server=utf8mb4_0900_ai_ci --innodb-large-prefix=true --innodb-file-format=Barracuda
        environment:
          MYSQL_USER: root
          MYSQL_ALLOW_EMPTY_PASSWORD: true
    steps:
      - checkout
      - run: apt update && apt install -y mysql-client
      - run:
          name: install dockerize
          command: wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && sudo tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
      - run:
          name: Wait for db
          command: dockerize -wait tcp://localhost:3306 -timeout 1m      
      - run:
          name: Create school DB
          command: mysql -h 127.0.0.1 -u root -e "create database school;"
      - run:
          name: Create Teachers table
          command: |
                mysql -h 127.0.0.1 -u root -e "CREATE TABLE `teachers` (
                                                  `id` int(11) NOT NULL AUTO_INCREMENT,
                                                  `email` varchar(320) NOT NULL,
                                                  PRIMARY KEY (`id`),
                                                  UNIQUE KEY `id_UNIQUE` (`id`),
                                                  KEY `Non-Clustered` (`email`)
                                                  ) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;"
      - run:
          name: Create Students table
          command: |
                 mysql -h 127.0.0.1 -u root -e "CREATE TABLE `students` (
                                               `id` int(11) NOT NULL AUTO_INCREMENT,
                                               `email` varchar(320) NOT NULL,
                                                isSuspended` tinyint(4) NOT NULL DEFAULT '0',
                                                UNIQUE KEY `id_UNIQUE` (`id`),
                                                KEY `Non-Clustered` (`email`)
                                                ) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;"
      - run:
          name: Create Teacher-Student relationships table
          command: |
                 mysql -h 127.0.0.1 -u root -e "CREATE TABLE `teacher_student` (
                                               `id` int(11) NOT NULL AUTO_INCREMENT,
                                               `teacherid` int(11) NOT NULL,
                                               `studentid` int(11) NOT NULL,
                                                PRIMARY KEY (`id`),
                                                KEY `teacherid_idx` (`teacherid`),
                                                KEY `studentid_idx` (`studentid`),
                                                CONSTRAINT `studentid` FOREIGN KEY (`studentid`) REFERENCES `students` (`id`),
                                                CONSTRAINT `teacherid` FOREIGN KEY (`teacherid`) REFERENCES `teachers` (`id`)
                                                ) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;"
      - run:
          name: update-npm
          command: 'sudo npm install -g npm@latest'                                                
      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "package.json" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - save_cache:
          paths:
            - node_modules
          key: v1-dependencies-{{ checksum "package.json" }}
      - run: # run tests
          name: test
          command: npm test
      - run: # run coverage report
          name: code-coverage
          command: './node_modules/.bin/nyc report --reporter=text-lcov'
      - store_artifacts: # special step to save test results as as artifact
          # Upload test summary for display in Artifacts: https://circleci.com/docs/2.0/artifacts/ 
          path: test-results.xml
          prefix: tests
      - store_artifacts: # for display in Artifacts: https://circleci.com/docs/2.0/artifacts/ 
          path: coverage
          prefix: coverage
      - store_test_results: # for display in Test Summary: https://circleci.com/docs/2.0/collect-test-data/
          path: test-results.xml            
      - run:
          name: Build & Push docker image
          command: |
            docker build -t khteh/node.jsrestapi:latest -t khteh/node.jsrestapi:$CIRCLE_BUILD_NUM .
      - run:
          name: Login to docker hub
          command: docker login -u $DOCKER_USER -p $DOCKER_PASS
      - run:
          name: Push images to docker hub
          command: |
            docker push khteh/node.jsrestapi:latest
            docker push khteh/node.jsrestapi:$CIRCLE_BUILD_NUM          