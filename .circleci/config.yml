version: 2 # use CircleCI 2.0
jobs: # a collection of steps
  build: # runs not using Workflows must have a `build` job as entry point
    working_directory: ~/workspace # directory where steps will run
    docker: # run the steps with Docker
      - image: node:latest # ...with this image as the primary container; this is where all `steps` will run
        restart: on-failure # Restart the container if it exits due to an error
        environment:
          MYSQL_HOST: 127.0.0.1
          MYSQL_DB: school_test
          MYSQL_USER: root
          MYSQL_ALLOW_EMPTY_PASSWORD: true
      - image: mysql:latest
        restart: on-failure # Restart the container if it exits due to an error
        command: mysqld --character-set-server=utf8mb4 --collation-server=utf8mb4_0900_ai_ci --default-authentication-plugin=mysql_native_password
        environment:
          MYSQL_HOST: 127.0.0.1
          MYSQL_DB: school_test
          MYSQL_USER: root
          MYSQL_ALLOW_EMPTY_PASSWORD: true
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run: apt update && apt install -y mysql-client
      - run:
          name: install dockerize
          command: wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
      - run:
          name: Wait for MYSQL Server
          command: dockerize -wait tcp://localhost:3306 -timeout 1m      
      - run:
          name: Prepare database for tests
          command: mysql -h 127.0.0.1 -u root < school_db.sql
      - run:
          name: update-npm
          command: npm install -g npm@latest
      - run:
          name: Fix executable permission
          command: chmod +x node_modules/.bin/*
      - run:
          name: install mocha, junit-reporter, nyc and eslint
          command: npm i -g mocha mocha-junit-reporter nyc eslint
      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "package.json" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - run:
          name: install-npm-wee
          command: npm install            
      - save_cache:
          paths:
            - node_modules
          key: v1-dependencies-{{ checksum "package.json" }}
      - run: mkdir test_reports
      - run: # run tests
          name: Tests
          command: npm run cover
          when: always
      - run:
          name: eslint
          command: ./node_modules/.bin/eslint ./ --format junit --output-file ./test_reports/eslint/eslint.xml
          when: always
      - run:
          name: Setup Code Climate test-reporter
          command: |
             # download test reporter as a static binary
             curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
             chmod +x ./cc-test-reporter
             ./cc-test-reporter before-build
          when: always
      - run:
          name: code-coverage
          command: |
            mkdir coverage
            # nyc report requires that nyc has already been run,
            # which creates the .nyc_output folder containing necessary data
            nyc report --reporter=text-lcov > coverage/lcov.info
            ./cc-test-reporter after-build -t lcov
          when: always          
      - store_test_results: # special step to save test results as as artifact
          # Upload test summary for display in Artifacts: https://circleci.com/docs/2.0/artifacts/ 
          path: test_reports
      - store_artifacts: # for display in Artifacts: https://circleci.com/docs/2.0/artifacts/ 
          path: ./test_reports/mocha/test-results.xml
          prefix: coverage
      - store_artifacts: # for display in Test Summary: https://circleci.com/docs/2.0/collect-test-data/
          path: ./test_reports/eslint/eslint.xml
      - store_artifacts: # upload test coverage as artifact
          path: ./coverage/lcov.info
          prefix: tests          
      - run:
          name: Build & Push docker image
          command: |
            docker build -t khteh/node.jsrestapi:latest -t khteh/node.jsrestapi:$CIRCLE_BUILD_NUM .
      - run:
          name: Login to docker hub
          command: docker login -u $DOCKER_USER -p $DOCKER_PASS
      - run:
          name: Push images to docker hub
          command: |
            docker push khteh/node.jsrestapi:latest
            docker push khteh/node.jsrestapi:$CIRCLE_BUILD_NUM          