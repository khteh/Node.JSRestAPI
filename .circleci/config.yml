version: 2.1 # use CircleCI 2.0
jobs: # a collection of steps
  build_and_test: # runs not using Workflows must have a `build` job as entry point
    working_directory: ~/workspace # directory where steps will run
    docker: # run the steps with Docker
      - image: node:latest # ...with this image as the primary container; this is where all `steps` will run
        environment:
          MYSQL_HOST: 127.0.0.1
          MYSQL_DB: school_test
          MYSQL_USER: root
          MYSQL_ALLOW_EMPTY_PASSWORD: true
      - image: mysql:latest
        command: mysqld --character-set-server=utf8mb4 --collation-server=utf8mb4_0900_ai_ci --default-authentication-plugin=mysql_native_password
        environment:
          MYSQL_HOST: 127.0.0.1
          MYSQL_DB: school_test
          MYSQL_USER: root
          MYSQL_ALLOW_EMPTY_PASSWORD: true
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: false # Only available in paid plan
      - run: apt update && apt install -y mysql-client
      - run:
          name: Install Docker client
          command: |
            VER="19.03.9"
            curl -L -o /tmp/docker-$VER.tgz https://download.docker.com/linux/static/stable/x86_64/docker-$VER.tgz
            tar -xz -C /tmp -f /tmp/docker-$VER.tgz
            mv /tmp/docker/* /usr/bin
      - run:
          name: install dockerize
          command: |
            DOCKERIZE_VERSION="v0.6.1"
            wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
      - run:
          name: Wait for MYSQL Server
          command: dockerize -wait tcp://localhost:3306 -timeout 1m      
      - run:
          name: Prepare database for tests
          command: mysql -h 127.0.0.1 -u root < school_db.sql
      - run:
          name: update-npm
          command: npm install -g npm@latest
      - run: mkdir test_reports          
      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "package.json" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - run:
          name: install-npm-wee
          command: npm install            
      - save_cache:
          paths:
            - node_modules
          key: v1-dependencies-{{ checksum "package.json" }}
      - run:
          name: Fix working directory permissions
          command: chmod -R ugo+rwx .
      - run: # run tests
          name: Tests
          command: ./node_modules/.bin/nyc --reporter=lcov --reporter=text ./node_modules/.bin/mocha tests --timeout 10000 --recursive --check-leaks --exit  --reporter mocha-junit-reporter --reporter-options mochaFile=test_reports/mocha/test-results.xml
          when: always
      - store_artifacts: # for display in Artifacts: https://circleci.com/docs/2.0/artifacts/
          path: coverage
          prefix: coverage
      - store_artifacts:
          path: test_reports/mocha/test-results.xml
          prefix: mocha
      - store_test_results: # special step to save test results as as artifact
          # for display in Test Summary: https://circleci.com/docs/2.0/collect-test-data/
          path: test_reports
          prefix: mocha
      - run:
          name: Build docker image
          command: |
            VERSION=$(node -p "require('./package.json').version").$CIRCLE_BUILD_NUM
            docker build -t khteh/node.jsrestapi:latest -t khteh/node.jsrestapi:$VERSION .
      - run:
          name: Login to docker hub
          command: docker login -u $DOCKER_USER -p $DOCKER_PASS
      - run:
          name: Push images to docker hub
          command: |
            VERSION=$(node -p "require('./package.json').version").$CIRCLE_BUILD_NUM
            echo ${VERSION} > docker-build_number.txt
            docker push khteh/node.jsrestapi:latest
            docker push khteh/node.jsrestapi:$VERSION          
      - persist_to_workspace:
          name: Save Workspace
          root: .
          paths:
            - docker-build_number.txt
  deploy-eks:
    working_directory: /tmp
    docker: 
      - image: khteh/circleci-openjdk:latest
    steps:  
      - attach_workspace:
          at: /tmp
      - setup_remote_docker:
          docker_layer_caching: false # Only available in paid plan
      - run:  
          name: Use the saved build number here
          command: |
            echo 'export CIRCLE_BUILD_NUM_DOCKER="$(cat /tmp/docker-build_number.txt)"' >> $BASH_ENV
            . $BASH_ENV
            echo CIRCLE_BUILD_NUM_DOCKER: $CIRCLE_BUILD_NUM_DOCKER
      - run:  
          name: Set Default AWS Region
          command: aws configure set default.region $AWS_REGION
      - run:  
          name: Set AWS Access Key
          command: aws configure set aws_access_key_id $AWS_ACCESS_KEY
      - run:  
          name: Set AWS Secret Key
          command: aws configure set aws_secret_access_key $AWS_SECRET_KEY
      - run:  
          name: Update Kubectl Configuration with cluster name
          command: aws eks update-kubeconfig --name $EKS_CLUSTER_NAME
      - run:  
          name: Update Node.JS RestAPI application
          command: |
            kubectl patch statefulset nodejsrestapi --type='json' -p='[{"op": "replace", "path": "/spec/template/spec/containers/0/image", "value":"'$AWS_ACCOUNT_ID'.dkr.ecr.ap-southeast-1.amazonaws.com/nodejsrestapi:'$CIRCLE_BUILD_NUM_DOCKER'"}]'
workflows:
  main:
    jobs:
      - build_and_test
#      - deploy-eks:
#          requires:
#            - build
#          filters:
#            branches:
#              only: master
