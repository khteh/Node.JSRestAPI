version: 2.1 # use CircleCI 2.0
orbs:
  aws-cli: circleci/aws-cli@3.1.4
  slack: circleci/slack@4.10.1

executors:
  node:
    docker:
      - image: node:18

references:
  workspace_root: &workspace_root ~/workspace

  attach_workspace: &attach_workspace
    attach_workspace:
      at: *workspace_root

defaults: &defaults # Default directory to run the steps in.
  working_directory: *workspace_root

jobs: # a collection of steps
  build_and_test: # runs not using Workflows must have a `build` job as entry point
    <<: *defaults
    docker: # run the steps with Docker
      - image: node:latest # ...with this image as the primary container; this is where all `steps` will run
      - image: postgres:latest
        environment:
          POSTGRES_PASSWORD: $POSTGRESQL_PASSWORD
          POSTGRESQL_HOST: 127.0.0.1
          POSTGRESQL_DB: school_test
          POSTGRESQL_ALLOW_EMPTY_PASSWORD: true
          POSTGRESQL_USER: $POSTGRESQL_USER
          POSTGRESQL_PASSWORD: $POSTGRESQL_PASSWORD
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run: apt update -y && apt install -y default-mysql-client
      - run:
          name: Install Docker client
          command: |
            VER="20.10.9"
            curl -L -o /tmp/docker-$VER.tgz https://download.docker.com/linux/static/stable/x86_64/docker-$VER.tgz
            tar -xz -C /tmp -f /tmp/docker-$VER.tgz
            mv /tmp/docker/* /usr/bin
      - run:
          name: install dockerize
          command: |
            DOCKERIZE_VERSION="v0.6.1"
            wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
      #- run:
      #    name: Wait for MYSQL Server
      #    command: dockerize -wait tcp://localhost:3306 -timeout 1m
      #- run:
      #    name: Prepare database for tests
      #    command: mysql -h 127.0.0.1 -u root < school_db.sql
      - run: mkdir test_reports
      # Download and cache dependencies
      - restore_cache:
          key: v1-dependencies-{{ .Branch }}-{{ checksum "package-lock.json" }}
      - run:
          name: Install dependencies
          command: npm install
      - save_cache:
          key: v1-dependencies-{{ .Branch }}-{{ checksum "package-lock.json" }}
          paths:
            - node_modules
      - run:
          name: Fix working directory permissions
          command: chmod -R ugo+rwx .
      - run:
          name: Build Typescript files
          command: npm run build_all
      #- run: # run tests
      #    name: Javascript Tests
      #    no_output_timeout: 5m
      #    command: export NODE_ENV=test && ./node_modules/.bin/nyc --timeout 10000 --recursive --check-leaks --reporter=lcov --reporter=text --reporter=text-summary --reporter=html ./node_modules/.bin/mocha --reporter mocha-junit-reporter --reporter-options mochaFile=test_reports/mocha/test-results.xml tests --exit
      #    when: always
      - run: # run tests
          name: Typescript Tests
          no_output_timeout: 5m
          command: export NODE_ENV=test && ./node_modules/.bin/nyc --timeout 10000 --recursive --check-leaks --reporter=lcov --reporter=text --reporter=text-summary --reporter=html ./node_modules/.bin/mocha -r ts-node/register tests/**/*.ts --reporter mocha-junit-reporter --reporter-options mochaFile=test_reports/mocha/test-results.xml --exit
          when: always
      - store_artifacts: # for display in Artifacts: https://circleci.com/docs/2.0/artifacts/
          path: coverage
          prefix: coverage
      - store_artifacts:
          path: test_reports/mocha/test-results.xml
          prefix: mocha
      - store_test_results: # special step to save test results as as artifact
          # for display in Test Summary: https://circleci.com/docs/2.0/collect-test-data/
          path: test_reports
          prefix: mocha
      - run:
          name: Build docker image
          command: |
            VERSION=$(node -p "require('./package.json').version").$CIRCLE_BUILD_NUM
            docker build -t khteh/node.jsrestapi:latest -t khteh/node.jsrestapi:$VERSION .
      - run:
          name: Login to docker hub
          command: docker login -u $DOCKER_USER -p $DOCKER_PASS
      - run:
          name: Push images to docker hub
          command: |
            VERSION=$(node -p "require('./package.json').version").$CIRCLE_BUILD_NUM
            echo ${VERSION} > docker-build_number.txt
            docker push khteh/node.jsrestapi:latest
            docker push khteh/node.jsrestapi:$VERSION
      - persist_to_workspace:
          root: *workspace_root
          paths:
            - .

  deploy-eks:
    executor: aws-cli/default
    <<: *defaults
    steps:
      - *attach_workspace
      - setup_remote_docker:
          docker_layer_caching: true
      - aws-cli/setup:
          profile-name: default
      - run:
          name: Use the saved build number here
          command: |
            echo 'export CIRCLE_BUILD_NUM_DOCKER="$(cat /tmp/docker-build_number.txt)"' >> $BASH_ENV
            . $BASH_ENV
            echo CIRCLE_BUILD_NUM_DOCKER: $CIRCLE_BUILD_NUM_DOCKER
      - run:
          name: Update Node.JS RestAPI application
          command: |
            kubectl patch statefulset nodejsrestapi --type='json' -p='[{"op": "replace", "path": "/spec/template/spec/containers/0/image", "value":"'$AWS_ACCOUNT_ID'.dkr.ecr.ap-southeast-1.amazonaws.com/nodejsrestapi:'$CIRCLE_BUILD_NUM_DOCKER'"}]'
workflows:
  main:
    jobs:
      - build_and_test
#      - deploy-eks:
#          requires:
#            - build
#          filters:
#            branches:
#              only: master
