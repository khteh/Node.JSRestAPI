version: 2 # use CircleCI 2.0
jobs: # a collection of steps
  build: # runs not using Workflows must have a `build` job as entry point
    working_directory: ~/workspace # directory where steps will run
    docker: # run the steps with Docker
      - image: node:latest # ...with this image as the primary container; this is where all `steps` will run
        environment:
          MYSQL_HOST: 127.0.0.1
          MYSQL_DB: school_test
          MYSQL_USER: root
          MYSQL_ALLOW_EMPTY_PASSWORD: true
      - image: mysql:latest
        command: mysqld --character-set-server=utf8mb4 --collation-server=utf8mb4_0900_ai_ci --default-authentication-plugin=mysql_native_password
        environment:
          MYSQL_HOST: 127.0.0.1
          MYSQL_DB: school_test
          MYSQL_USER: root
          MYSQL_ALLOW_EMPTY_PASSWORD: true
    steps:
      - checkout
      - run: apt update && apt install -y mysql-client
      - run:
          name: install dockerize
          command: wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
      - run:
          name: Wait for db
          command: dockerize -wait tcp://localhost:3306 -timeout 1m      
      - run:
          name: Create school DB
          command: mysql -h 127.0.0.1 -u root < school_db.sql
      - run:
          name: Create and grant guest user
          command: |
            mysql -h 127.0.0.1 -u root -e "CREATE USER 'guest'@'localhost' IDENTIFIED BY 'P@$$w0rd';"
            mysql -h 127.0.0.1 -u root -e "grant all privileges on school_test.* to 'guest'@'localhost';"
      - run:
          name: update-npm
          command: npm install -g npm@latest
      - run:
          name: install mocha
          command: npm i -g mocha
      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "package.json" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - run:
          name: install-npm-wee
          command: npm install            
      - save_cache:
          paths:
            - node_modules
          key: v1-dependencies-{{ checksum "package.json" }}
      - run: # run tests
          name: Tests
          command: npm test
      - run: # run coverage report
          name: code-coverage
          command: ./node_modules/.bin/nyc report --reporter=text-lcov
      - store_artifacts: # special step to save test results as as artifact
          # Upload test summary for display in Artifacts: https://circleci.com/docs/2.0/artifacts/ 
          path: test-results.xml
          prefix: tests
      - store_artifacts: # for display in Artifacts: https://circleci.com/docs/2.0/artifacts/ 
          path: coverage
          prefix: coverage
      - store_test_results: # for display in Test Summary: https://circleci.com/docs/2.0/collect-test-data/
          path: test-results.xml            
      - run:
          name: Build & Push docker image
          command: |
            docker build -t khteh/node.jsrestapi:latest -t khteh/node.jsrestapi:$CIRCLE_BUILD_NUM .
      - run:
          name: Login to docker hub
          command: docker login -u $DOCKER_USER -p $DOCKER_PASS
      - run:
          name: Push images to docker hub
          command: |
            docker push khteh/node.jsrestapi:latest
            docker push khteh/node.jsrestapi:$CIRCLE_BUILD_NUM          