/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: school.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./student";
import * as dependency_2 from "./teacher";
import * as dependency_3 from "./response";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace school {
    export class RegisterRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            teachers?: dependency_2.school.teacher[];
            students?: dependency_1.school.student[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1, 2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("teachers" in data && data.teachers != undefined) {
                    this.teachers = data.teachers;
                }
                if ("students" in data && data.students != undefined) {
                    this.students = data.students;
                }
            }
        }
        get teachers() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_2.school.teacher, 1) as dependency_2.school.teacher[];
        }
        set teachers(value: dependency_2.school.teacher[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get students() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_1.school.student, 2) as dependency_1.school.student[];
        }
        set students(value: dependency_1.school.student[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        static fromObject(data: {
            teachers?: ReturnType<typeof dependency_2.school.teacher.prototype.toObject>[];
            students?: ReturnType<typeof dependency_1.school.student.prototype.toObject>[];
        }): RegisterRequest {
            const message = new RegisterRequest({});
            if (data.teachers != null) {
                message.teachers = data.teachers.map(item => dependency_2.school.teacher.fromObject(item));
            }
            if (data.students != null) {
                message.students = data.students.map(item => dependency_1.school.student.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                teachers?: ReturnType<typeof dependency_2.school.teacher.prototype.toObject>[];
                students?: ReturnType<typeof dependency_1.school.student.prototype.toObject>[];
            } = {};
            if (this.teachers != null) {
                data.teachers = this.teachers.map((item: dependency_2.school.teacher) => item.toObject());
            }
            if (this.students != null) {
                data.students = this.students.map((item: dependency_1.school.student) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.teachers.length)
                writer.writeRepeatedMessage(1, this.teachers, (item: dependency_2.school.teacher) => item.serialize(writer));
            if (this.students.length)
                writer.writeRepeatedMessage(2, this.students, (item: dependency_1.school.student) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RegisterRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RegisterRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.teachers, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_2.school.teacher.deserialize(reader), dependency_2.school.teacher));
                        break;
                    case 2:
                        reader.readMessage(message.students, () => pb_1.Message.addToRepeatedWrapperField(message, 2, dependency_1.school.student.deserialize(reader), dependency_1.school.student));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RegisterRequest {
            return RegisterRequest.deserialize(bytes);
        }
    }
    export class AddStudentsToTeacherRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            teacher?: dependency_2.school.teacher;
            students?: string[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("teacher" in data && data.teacher != undefined) {
                    this.teacher = data.teacher;
                }
                if ("students" in data && data.students != undefined) {
                    this.students = data.students;
                }
            }
        }
        get teacher() {
            return pb_1.Message.getWrapperField(this, dependency_2.school.teacher, 1) as dependency_2.school.teacher;
        }
        set teacher(value: dependency_2.school.teacher) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_teacher() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get students() {
            return pb_1.Message.getFieldWithDefault(this, 2, []) as string[];
        }
        set students(value: string[]) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            teacher?: ReturnType<typeof dependency_2.school.teacher.prototype.toObject>;
            students?: string[];
        }): AddStudentsToTeacherRequest {
            const message = new AddStudentsToTeacherRequest({});
            if (data.teacher != null) {
                message.teacher = dependency_2.school.teacher.fromObject(data.teacher);
            }
            if (data.students != null) {
                message.students = data.students;
            }
            return message;
        }
        toObject() {
            const data: {
                teacher?: ReturnType<typeof dependency_2.school.teacher.prototype.toObject>;
                students?: string[];
            } = {};
            if (this.teacher != null) {
                data.teacher = this.teacher.toObject();
            }
            if (this.students != null) {
                data.students = this.students;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_teacher)
                writer.writeMessage(1, this.teacher, () => this.teacher.serialize(writer));
            if (this.students.length)
                writer.writeRepeatedString(2, this.students);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AddStudentsToTeacherRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AddStudentsToTeacherRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.teacher, () => message.teacher = dependency_2.school.teacher.deserialize(reader));
                        break;
                    case 2:
                        pb_1.Message.addToRepeatedField(message, 2, reader.readString());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AddStudentsToTeacherRequest {
            return AddStudentsToTeacherRequest.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedSchoolService {
        static definition = {
            Register: {
                path: "/school.School/Register",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: RegisterRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => RegisterRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_3.Response) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_3.Response.deserialize(new Uint8Array(bytes))
            },
            AddStudentsToTeacher: {
                path: "/school.School/AddStudentsToTeacher",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: AddStudentsToTeacherRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => AddStudentsToTeacherRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_3.Response) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_3.Response.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract Register(call: grpc_1.ServerUnaryCall<RegisterRequest, dependency_3.Response>, callback: grpc_1.sendUnaryData<dependency_3.Response>): void;
        abstract AddStudentsToTeacher(call: grpc_1.ServerUnaryCall<AddStudentsToTeacherRequest, dependency_3.Response>, callback: grpc_1.sendUnaryData<dependency_3.Response>): void;
    }
    export class SchoolClient extends grpc_1.makeGenericClientConstructor(UnimplementedSchoolService.definition, "School", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        Register: GrpcUnaryServiceInterface<RegisterRequest, dependency_3.Response> = (message: RegisterRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_3.Response>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_3.Response>, callback?: grpc_1.requestCallback<dependency_3.Response>): grpc_1.ClientUnaryCall => {
            return super.Register(message, metadata, options, callback);
        };
        AddStudentsToTeacher: GrpcUnaryServiceInterface<AddStudentsToTeacherRequest, dependency_3.Response> = (message: AddStudentsToTeacherRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_3.Response>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_3.Response>, callback?: grpc_1.requestCallback<dependency_3.Response>): grpc_1.ClientUnaryCall => {
            return super.AddStudentsToTeacher(message, metadata, options, callback);
        };
    }
}
